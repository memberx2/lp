/* ==========================================================================
   UTILITIES
   ========================================================================== */

/* Backgrounds
   ========================================================================== */
@for $i from 1 through length($colors) {
    .u-bg-#{$i} {
        background-color: nth($colors, $i);
    }
}
@for $i from 1 through length($colors) {
    .u-bg-#{$i}-on-hover {
        &:hover {
            background-color: nth($colors, $i);
        }
    }
}

// for double horizontal background
// @for $i from 1 through length($colors) {
//     @for $j from 1 through length($colors) {
//         .u-bg-double-#{$i}-#{$j} {
//             background: linear-gradient(to left, nth($colors, $i) 0%,nth($colors, $i) 50%, nth($colors, $j) 50%,nth($colors, $j) 100%);
//         }
//     }
// }


.u-bg-current {
    background-color: currentColor;
}
.u-bg-current-on-hover {
    &:hover {
        background-color: currentColor;
    }
}
.u-bg-transparent {
    background-color: transparent;
}
.u-bg-transparent-on-hover {
    &:hover {
        background-color: transparent;
    }
}

/* Paints (colors)
========================================================================== */
@for $i from 1 through length($colors) {
    .u-paint-#{$i} {
        color: nth($colors, $i);
    }
}
// if we want to change colors on different screens resolutions we need to generate griddle class instead of regular class
// @for $i from 1 through length($colors) {
//     @include gridle_generate_custom_class( ('u','-','paint','-','#{$i}','@','%state') ) {
//         color: nth($colors, $i);
        
//         content: '#{gridle_get_current_state_name()}';
//     }
// }

@for $i from 1 through length($colors) {
    .u-paint-#{$i}-on-hover {
        &:hover {
            color: nth($colors, $i);
        }
    }
}
.u-paint-current-on-hover {
    &:hover {
        color: currentColor;
    }
}

/* Borders
========================================================================== */
@for $i from 1 through length($colors) {
    .u-border-#{$i} {
        border-color: nth($colors, $i);
    }
}

@for $i from 1 through length($colors) {
    .u-border-#{$i}-on-hover {
        &:hover {
            border-color: nth($colors, $i);
        }
    }
}
.u-border-current {
    border-color: currentColor;
}
.u-border-current-on-hover {
    &:hover {
        border-color: currentColor;
    }
}

/* Absolutle position gridle classes
========================================================================== */

// @include gridle_generate_custom_class( ('u','-','absolute','-','off','@','%state') ) {
//     top: auto;
//     right: auto;
//     bottom: auto;
//     left: auto;
//     position: static;
//     transform: translate(0%, 0%);
// }

// @include gridle_generate_custom_class( ('u','-','absolute','-','top','@','%state') ) {
//     top: 0;
//     bottom: auto;
//     transform: translateY(0%);
// }
// @include gridle_generate_custom_class( ('u','-','absolute','-','right','@','%state') ) {
//     right: 0;
//     left: auto;
//     transform: translateX(0%);
// }
// @include gridle_generate_custom_class( ('u','-','absolute','-','bottom','@','%state') ) {
//     bottom: 0;
//     top: auto;
//     transform: translateY(0%);
// }
// @include gridle_generate_custom_class( ('u','-','absolute','-','left','@','%state') ) {
//     left: 0;
//     right: auto;
//     transform: translateX(0%);
// }


// @include gridle_generate_custom_class( ('u','-','absolute','-','middle','-','top','@','%state') ) {
//     top: 0;
//     bottom: auto;
//     transform: translateY(-50%);
// }
// @include gridle_generate_custom_class( ('u','-','absolute','-','middle','-','right','@','%state') ) {
//     right: 0;
//     left: auto;
//     transform: translateX(50%);
// }
// @include gridle_generate_custom_class( ('u','-','absolute','-','middle','-','bottom','@','%state') ) {
//     bottom: 0;
//     top: auto;
//     transform: translateY(50%);
// }
// @include gridle_generate_custom_class( ('u','-','absolute','-','middle','-','left','@','%state') ) {
//     left: 0;
//     right: auto;
//     transform: translateX(-50%);
// }

// @include gridle_generate_custom_class( ('u','-','absolute','-','total','-','top','@','%state') ) {
//     top: 0;
//     bottom: auto;
//     transform: translateY(-100%);
// }
// @include gridle_generate_custom_class( ('u','-','absolute','-','total','-','right','@','%state') ) {
//     right: 0;
//     left: auto;
//     transform: translateX(100%);
// }
// @include gridle_generate_custom_class( ('u','-','absolute','-','total','-','bottom','@','%state') ) {
//     bottom: 0;
//     top: auto;
//     transform: translateY(100%);
// }
// @include gridle_generate_custom_class( ('u','-','absolute','-','total','-','left','@','%state') ) {
//     left: 0;
//     right: auto;
//     transform: translateX(-100%);
// }


/* Change element color/background on parent hover
========================================================================== */
/* Example:
    You set following colors in variables file: $color_1: black; $color_2: yellow;
    You have button with following classes="u-paint-1 u-bg-2" ("u-paint-1" class styles: color: $color_1 (= black). "u-bg-2" class styles: background-color: $color_2 (= yellow)) inside some box (it doesn't have to be direct parent of this button).
    You want the button switch colors on the box hover state - it means have reverse color/background: color: yellow; and background-color: black;
    You need to give "u-rev-on-hover-parent" class to the box and "u-rev-on-hover" class to the button
*/
// .u-rev-on-hover-parent {
//     &:hover {
//         .u-rev-on-hover {
//             @for $i from 1 through length($colors) {
//                 &.u-paint-#{$i} {
//                     background-color: nth($colors, $i);
//                 }
//                 &.u-bg-#{$i} {
//                     color: nth($colors, $i);
//                 }
//             }
//         }
//     }
// }

/* Example:
    You set following colors in variables file: $color_1: black; $color_2: purple; $color_3: red; $color_4: yellow;
    You have button with following classes="u-paint-1 u-bg-2" ("u-paint-1" class styles: color: $color_1. "u-bg-2" class styles: color: $color_2) inside some box (it doesn't have to be direct parent of this button).
    You want the button change its color on $color_3 and its background on $color_4 while the box is hovered.
    You need to give "u-change-on-parent-hov-parent" class to the box and "u-change-on-parent-hov-paint-3 u-change-on-parent-hov-bg-4" classes to the button
*/
// .u-change-on-parent-hov-parent {
//     &:hover {
//         @for $i from 1 through length($colors) {
//             .u-change-on-parent-hov {
//                 &-paint-#{$i} {
//                     color: nth($colors, $i);
                    
//                 }
//                 &-bg-#{$i} {
//                    background-color: nth($colors, $i);
//                 }
//             }
//         }
//     }
// }

/* Sets of utilities ex. set of styles for buttons (those classes can be added to linsk and buttons)
   ========================================================================== */
/*
.s-btn-style {
    &-1 {
        position: relative;

        overflow: hidden;

        min-width: $size_s-btn_h;

        color: $color_2;
        background-color: $color_3;

        @include helper--btn-styles;
        &:before {
            position: absolute;

            z-index: 1;
            top: 0;
            right: 0;
            bottom: 0;
            left: 0;

            display: block;

            width: 100%;
            height: 100%;
            margin: auto;

            content: '';
            transition: 500ms cubic-bezier(.190, 1.000, .220, 1.000);
            transform: translateY(100%);

            background-color: $color_5;
        }
        .c-label {
            position: relative;
            z-index: 2;

            font-family: $font_sans;
            font-size: 14px;
            font-weight: 500;
            line-height: 1;

            letter-spacing: 1.2px;
            text-transform: uppercase;
        }
        &:hover {
            &:before {
                transform: translateY(0%);
            }
        }
    }
}
*/



/* ==========================================================================
   MODIFIERS
   ========================================================================== */

/* Text line-heights
   ========================================================================== */
@include gridle_generate_custom_class( ('u','-','line','-','h','-','n','@','%state') ) {
    line-height: 1; // neutral

    content: '#{gridle_get_current_state_name()}';
}

// @include gridle_generate_custom_class( ('u','-','line','-','h','-','m','@','%state') ) {
//     line-height: 1.4; // m

//     content: '#{gridle_get_current_state_name()}';
// }


/* Text direction
   ========================================================================== */
@include gridle_generate_custom_class( ('u','-','text','-','centered','@','%state') ) {
    content: '#{gridle_get_current_state_name()}';
    text-align: center;
}
@include gridle_generate_custom_class( ('u','-','text','-','left','@','%state') ) {
    content: '#{gridle_get_current_state_name()}';
    text-align: left;
}
@include gridle_generate_custom_class( ('u','-','text','-','right','@','%state') ) {
    content: '#{gridle_get_current_state_name()}';
    text-align: right;
}

/* Text transform
   ========================================================================== */
@include gridle_generate_custom_class( ('u','-','text','-','upper','@','%state') ) {
    content: '#{gridle_get_current_state_name()}';
    text-transform: uppercase;
}
@include gridle_generate_custom_class( ('u','-','text','-','lower','@','%state') ) {
    content: '#{gridle_get_current_state_name()}';
    text-transform: lowercase;
}
@include gridle_generate_custom_class( ('u','-','text','-','initial','@','%state') ) {
    content: '#{gridle_get_current_state_name()}';
    text-transform: initial;
}

/* Letter-spacing
   ========================================================================== */
@include gridle_generate_custom_class( ('u','-','spacing','-','normal','@','%state') ) {
    content: '#{gridle_get_current_state_name()}';
    letter-spacing: normal;
}

// @include gridle_generate_custom_class( ('u','-','spacing','-','m','@','%state') ) {
//     content: '#{gridle_get_current_state_name()}';
//     letter-spacing: 1px;
// }
// @include gridle_generate_custom_class( ('u','-','spacing','-','l','@','%state') ) {
//     content: '#{gridle_get_current_state_name()}';
//     letter-spacing: 2px;
// }


/* ==========================================================================
   GRID CUSTOM CLASSES
   ========================================================================== */

/* Paddings
   ========================================================================== */

/* padding top
   =========================== */
@for $i from $gutterTopNumber through 0 {
    @include gridle_generate_custom_class( ('g','-','gutter','-','top','-', '#{$i}' ,'@','%state') ) {
        padding-top: $i*$size_gutter;
        content : "#{gridle_get_current_state_name()}";
    }
}
@include gridle_generate_custom_class( ('g','-','gutter','-','top','-', 'half' ,'@','%state') ) {
    padding-top: .5*$size_gutter;
    content : "#{gridle_get_current_state_name()}";
}

/* padding bottom
   =========================== */
@for $i from $gutterBottomNumber through 0 {
    @include gridle_generate_custom_class( ('g','-','gutter','-','bottom','-', '#{$i}' ,'@','%state') ) {
        padding-bottom: $i*$size_gutter;
        content : "#{gridle_get_current_state_name()}";
    }
}
@include gridle_generate_custom_class( ('g','-','gutter','-','bottom','-', 'half' ,'@','%state') ) {
    padding-bottom: .5*$size_gutter;
    content : "#{gridle_get_current_state_name()}";
}

/* padding right
   =========================== */
@for $i from $gutterRightNumber through 0 {
    @include gridle_generate_custom_class( ('g','-','gutter','-','right','-', '#{$i}' ,'@','%state') ) {
        padding-right: $i*$size_gutter;
        content : "#{gridle_get_current_state_name()}";
    }
}
@include gridle_generate_custom_class( ('g','-','gutter','-','right','-', 'half' ,'@','%state') ) {
    padding-right: .5*$size_gutter;
    content : "#{gridle_get_current_state_name()}";
}

/* padding left
   =========================== */
@for $i from $gutterLeftNumber through 0 {
    @include gridle_generate_custom_class( ('g','-','gutter','-','left','-', '#{$i}' ,'@','%state') ) {
        padding-left: $i*$size_gutter;
        content : "#{gridle_get_current_state_name()}";
    }
}
@include gridle_generate_custom_class( ('g','-','gutter','-','left','-', 'half' ,'@','%state') ) {
    padding-left: .5*$size_gutter;
    content : "#{gridle_get_current_state_name()}";
}

/* padding
   =========================== */
@for $i from $gutterNumber through 0 {
    @include gridle_generate_custom_class( ('g','-','gutter','-','#{$i}' ,'@','%state') ) {
        padding: $i*$size_gutter;
        content : "#{gridle_get_current_state_name()}";
    }
}

/* Margins
========================================================================== */

/* margin top
   =========================== */
@for $i from $spacingTopNumber through 0 {
    @include gridle_generate_custom_class( ('g','-','spacing','-','top','-', '#{$i}' ,'@','%state') ) {
        margin-top: $i*$size_gutter;
        content : "#{gridle_get_current_state_name()}";
    }
}

/* negative margin top
   =========================== */
@for $i from $spacingTopNumber through 0 {
    @include gridle_generate_custom_class( ('g','-','spacing','-','top','-', 'minus','-', '#{$i}' ,'@','%state') ) {
        margin-top: -$i*$size_gutter;
        content : "#{gridle_get_current_state_name()}";
    }
}

/* margin right
   =========================== */
@for $i from $spacingRightNumber through 0 {
    @include gridle_generate_custom_class( ('g','-','spacing','-','right','-', '#{$i}' ,'@','%state') ) {
        margin-right: $i*$size_gutter;
        content : "#{gridle_get_current_state_name()}";
    }
}
/* negative margin right
   =========================== */
@for $i from $spacingRightNumber through 0 {
    @include gridle_generate_custom_class( ('g','-','spacing','-','right','-', 'minus','-', '#{$i}' ,'@','%state') ) {
        margin-right: -$i*$size_gutter;
        content : "#{gridle_get_current_state_name()}";
    }
}

/* margin bottom
   =========================== */
@for $i from $spacingBottomNumber through 0 {
    @include gridle_generate_custom_class( ('g','-','spacing','-','bottom','-','#{$i}','@','%state') ) {
        margin-bottom: $i*$size_gutter;
        content : "#{gridle_get_current_state_name()}";
    }
}

/* negative margin bottom
   =========================== */
@for $i from $spacingBottomNumber through 0 {
    @include gridle_generate_custom_class( ('g','-','spacing','-','bottom','-', 'minus','-', '#{$i}' ,'@','%state') ) {
        margin-bottom: -$i*$size_gutter;
        content : "#{gridle_get_current_state_name()}";
    }
}

/* margin left
   =========================== */
@for $i from $spacingLeftNumber through 0 {
    @include gridle_generate_custom_class( ('g','-','spacing','-','left','-', '#{$i}' ,'@','%state') ) {
        margin-left: $i*$size_gutter;
        content : "#{gridle_get_current_state_name()}";
    }
}
/* negative margin left
   =========================== */
@for $i from $spacingLeftNumber through 0 {
    @include gridle_generate_custom_class( ('g','-','spacing','-','left','-', 'minus','-', '#{$i}' ,'@','%state') ) {
        margin-left: -$i*$size_gutter;
        content : "#{gridle_get_current_state_name()}";
    }
}



/* Grid bugs fixes
   ========================================================================== */

/* fixes for row
   =========================== */
@include gridle_generate_custom_class( ('h','-','row','-','align','-','stretch','@','%state') ) {
    content: '#{gridle_get_current_state_name()}';

    display: flex;

    align-items: stretch;
    align-content: stretch;
}

/* fixes for gr
   =========================== */
@include gridle_generate_custom_class( ('h','-','fix','-','flex','@','%state') ) {
    content: '#{gridle_get_current_state_name()}';

    display: flex !important;
}

@include gridle_generate_custom_class( ('h','-','gr','-','center','@','%state') ) {
    content: '#{gridle_get_current_state_name()}';
    justify-content: center;
}
@include gridle_generate_custom_class( ('h','-','gr','-','bottom','@','%state') ) {
    content: '#{gridle_get_current_state_name()}';
    justify-content: flex-end;
}
@include gridle_generate_custom_class( ('h','-','gr','-','top','@','%state') ) {
    content: '#{gridle_get_current_state_name()}';
    justify-content: flex-start;
}


@include gridle_generate_custom_class( ('h','-','hide','@','%state') ) {
    content: '#{gridle_get_current_state_name()}';

    display: none !important;
}



